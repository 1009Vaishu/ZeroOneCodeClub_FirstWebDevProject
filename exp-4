{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPhU93vZIp0pkB1OSwwbCh0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/1009Vaishu/ZeroOneCodeClub_FirstWebDevProject/blob/main/exp-4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "32GL9jL-6UnK",
        "outputId": "484bb9ea-acc8-4f3c-d6f2-dde259ec5006"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 5  1  2  3]\n",
            " [ 9  6  7  4]\n",
            " [ 0 10 11  8]\n",
            " [13 14 15 12]]\n",
            "\n",
            "[[ 5  1  2  3]\n",
            " [ 0  6  7  4]\n",
            " [ 9 10 11  8]\n",
            " [13 14 15 12]]\n",
            "\n",
            "[[ 0  1  2  3]\n",
            " [ 5  6  7  4]\n",
            " [ 9 10 11  8]\n",
            " [13 14 15 12]]\n",
            "\n",
            "[[ 1  0  2  3]\n",
            " [ 5  6  7  4]\n",
            " [ 9 10 11  8]\n",
            " [13 14 15 12]]\n",
            "\n",
            "[[ 1  2  0  3]\n",
            " [ 5  6  7  4]\n",
            " [ 9 10 11  8]\n",
            " [13 14 15 12]]\n",
            "\n",
            "[[ 1  2  3  0]\n",
            " [ 5  6  7  4]\n",
            " [ 9 10 11  8]\n",
            " [13 14 15 12]]\n",
            "\n",
            "[[ 1  2  3  4]\n",
            " [ 5  6  7  0]\n",
            " [ 9 10 11  8]\n",
            " [13 14 15 12]]\n",
            "\n",
            "[[ 1  2  3  4]\n",
            " [ 5  6  7  8]\n",
            " [ 9 10 11  0]\n",
            " [13 14 15 12]]\n",
            "\n",
            "[[ 1  2  3  4]\n",
            " [ 5  6  7  8]\n",
            " [ 9 10 11 12]\n",
            " [13 14 15  0]]\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import heapq\n",
        "\n",
        "class PuzzleState:\n",
        "    def __init__(self, board, parent=None, move=None, depth=0):\n",
        "        self.board = board\n",
        "        self.parent = parent\n",
        "        self.move = move\n",
        "        self.depth = depth\n",
        "        self.blank_pos = self.find_blank()\n",
        "        self.cost = self.depth + self.heuristic()\n",
        "\n",
        "    def find_blank(self):\n",
        "        return tuple(np.argwhere(self.board == 0)[0])\n",
        "\n",
        "    def heuristic(self):\n",
        "        goal = np.arange(1, 17).reshape(4, 4)\n",
        "        goal[3, 3] = 0\n",
        "        manhattan_distance = 0\n",
        "        for i in range(4):\n",
        "            for j in range(4):\n",
        "                if self.board[i, j] != 0:\n",
        "                    x, y = divmod(self.board[i, j] - 1, 4)\n",
        "                    manhattan_distance += abs(x - i) + abs(y - j)\n",
        "        return manhattan_distance\n",
        "\n",
        "    def get_neighbors(self):\n",
        "        neighbors = []\n",
        "        x, y = self.blank_pos\n",
        "        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n",
        "\n",
        "        for dx, dy in directions:\n",
        "            new_x, new_y = x + dx, y + dy\n",
        "            if 0 <= new_x < 4 and 0 <= new_y < 4:\n",
        "                new_board = self.board.copy()\n",
        "                new_board[x, y], new_board[new_x, new_y] = new_board[new_x, new_y], new_board[x, y]\n",
        "                neighbors.append(PuzzleState(new_board, self, (dx, dy), self.depth + 1))\n",
        "\n",
        "        return neighbors\n",
        "\n",
        "    def __lt__(self, other):\n",
        "        return self.cost < other.cost\n",
        "\n",
        "def a_star(initial_board):\n",
        "    initial_state = PuzzleState(initial_board)\n",
        "    goal_board = np.arange(1, 17).reshape(4, 4)\n",
        "    goal_board[3, 3] = 0\n",
        "    open_set = []\n",
        "    heapq.heappush(open_set, initial_state)\n",
        "    closed_set = set()\n",
        "\n",
        "    while open_set:\n",
        "        current_state = heapq.heappop(open_set)\n",
        "        closed_set.add(tuple(current_state.board.flatten()))\n",
        "\n",
        "        if np.array_equal(current_state.board, goal_board):\n",
        "            return reconstruct_path(current_state)\n",
        "\n",
        "        for neighbor in current_state.get_neighbors():\n",
        "            if tuple(neighbor.board.flatten()) in closed_set:\n",
        "                continue\n",
        "            heapq.heappush(open_set, neighbor)\n",
        "\n",
        "    return None\n",
        "\n",
        "def reconstruct_path(state):\n",
        "    path = []\n",
        "    while state.parent is not None:\n",
        "        path.append(state)\n",
        "        state = state.parent\n",
        "    path.reverse()\n",
        "    return path\n",
        "\n",
        "def print_path(path):\n",
        "    for state in path:\n",
        "        print(state.board)\n",
        "        print()\n",
        "\n",
        "# Example usage:\n",
        "initial_board = np.array([\n",
        "    [5, 1, 2, 3],\n",
        "    [9, 6, 7, 4],\n",
        "    [13, 10, 11, 8],\n",
        "    [0, 14, 15, 12]\n",
        "])\n",
        "\n",
        "solution = a_star(initial_board)\n",
        "if solution:\n",
        "    print_path(solution)\n",
        "else:\n",
        "    print(\"No solution found.\")"
      ]
    }
  ]
}
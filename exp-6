{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNmLMUNNWJszp5brmrjLT77",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/1009Vaishu/ZeroOneCodeClub_FirstWebDevProject/blob/main/exp-6\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qtXox5Qd7dna",
        "outputId": "611bda8e-1c45-4924-b037-50bac7bee435"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The optimal value is: 4\n"
          ]
        }
      ],
      "source": [
        "def minimax(node, depth, maximizingPlayer, values):\n",
        "    # If the node is a terminal node, return its value\n",
        "    if depth == 3:\n",
        "        return values[node]\n",
        "\n",
        "    if maximizingPlayer:\n",
        "        best = float('-inf')\n",
        "\n",
        "        # Recur for left and right children\n",
        "        for i in range(0, 2):\n",
        "            val = minimax(node * 2 + i, depth + 1, False, values)\n",
        "            best = max(best, val)\n",
        "\n",
        "        return best\n",
        "    else:\n",
        "        best = float('inf')\n",
        "\n",
        "        # Recur for left and right children\n",
        "        for i in range(0, 2):\n",
        "            val = minimax(node * 2 + i, depth + 1, True, values)\n",
        "            best = min(best, val)\n",
        "\n",
        "        return best\n",
        "\n",
        "# The values at the terminal nodes (H to O)\n",
        "values = [-1, 4, 6, 2, -3, -5, 0, 7]\n",
        "\n",
        "# Start from the root of the tree (node A, which is node 0)\n",
        "result = minimax(0, 0, True, values)\n",
        "print(f\"The optimal value is: {result}\")"
      ]
    }
  ]
}